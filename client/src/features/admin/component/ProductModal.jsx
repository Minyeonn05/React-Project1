import React, { useState, useEffect } from 'react';
import "../../../assets/css/AdminDashboard.css";


// ‡∏£‡∏±‡∏ö props 4 ‡∏ï‡∏±‡∏ß
export default function ProductModal({ isOpen, onClose, onSave, product, mode }) {
  
  // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const initialFormState = {
    name: '',
    price: '',
    category: '',
    description: '',
    images: '', // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ Textarea ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà URL ‡∏ó‡∏µ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
  };
  const [formData, setFormData] = useState(initialFormState);
  const [isLoading, setIsLoading] = useState(false);

  // --- 3. üåü ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•) ---
  useEffect(() => {
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Modal ‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤
    if (isOpen) {
      if (mode === 'edit' && product) {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î 'edit' ‡πÅ‡∏•‡∏∞‡∏°‡∏µ 'product' ‡∏™‡πà‡∏á‡∏°‡∏≤
        // ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å 'product' ‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
        setFormData({
          name: product.name || '',
          price: product.price || '',
          category: product.category || '',
          description: product.description || '',
          // ‡πÅ‡∏õ‡∏•‡∏á Array (product.img) ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô String (‡∏ó‡∏µ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î)
          images: product.img ? product.img.join('\n') : '',
        });
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î 'add' ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡∏°
        setFormData(initialFormState);
      }
    }
  }, [isOpen, mode, product]); // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

  // 4. Function ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  // 5. Function ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Save (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á Add ‡πÅ‡∏•‡∏∞ Edit)
  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);

    // 6. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á (Payload)
    // ‡πÅ‡∏õ‡∏•‡∏á String ‡∏à‡∏≤‡∏Å Textarea ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô Array
    const imageArray = formData.images.split('\n').filter(Boolean); // filter(Boolean) ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á
    
    const payload = {
      ...formData,
      img: imageArray, // ‡πÉ‡∏ä‡πâ 'img' key ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö ProductCard
      price: parseFloat(formData.price) || 0,
    };
    delete payload.images; // ‡∏•‡∏ö key 'images' ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡∏¥‡πâ‡∏á

    // 7. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å URL ‡πÅ‡∏•‡∏∞ Method ‡∏ï‡∏≤‡∏° 'mode'
    let url = 'http://localhost:5000/api/products';
    let method = 'POST'; // Default ‡∏Ñ‡∏∑‡∏≠ 'add'

    if (mode === 'edit') {
      // (‡∏ú‡∏°‡πÄ‡∏î‡∏≤ API path ‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î remove ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö)
      url = 'http://localhost:5000/api/products/update'; 
      payload.id = product.id; // ‚ÄºÔ∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á id ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
    } else {
      url = 'http://localhost:5000/api/products/add';
    }

    try {
      const response = await fetch(url, {
        method: method, // (‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 'POST' ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà)
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to save product');
      }
      
      alert(`Product ${mode === 'edit' ? 'updated' : 'added'} successfully!`);
      onSave(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å refetch()
      onClose(); // ‡∏õ‡∏¥‡∏î Modal
      
    } catch (error) {
      console.error('Error saving product:', error);
      alert(`Error: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };


  // 8. ‡∏ñ‡πâ‡∏≤ isOpen ‡πÄ‡∏õ‡πá‡∏ô false ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á render ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢
  if (!isOpen) return null;

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content" onClick={(e) => e.stopPropagation()}>
        <header className="modal-header">
          <h2>{mode === 'edit' ? 'Edit Product' : 'Add New Product'}</h2>

        </header>
        
        <form onSubmit={handleSubmit}>
          <div className="modal-body">
            
            <div className="form-group">
              <label htmlFor="name">Product Name</label>
              <input
                id="name"
                name="name"
                type="text"
                className="form-input"
                value={formData.name}
                onChange={handleChange}
                required
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="price">Price</label>
              <input
                id="price"
                name="price"
                type="number"
                step="0.01"
                className="form-input"
                value={formData.price}
                onChange={handleChange}
                required
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="category">Category</label>
              <input
                id="category"
                name="category"
                type="text"
                className="form-input"
                value={formData.category}
                onChange={handleChange}
              />
            </div>

            <div className="form-group">
              <label htmlFor="description">Description</label>
              <textarea
                id="description"
                name="description"
                className="form-textarea"
                value={formData.description}
                onChange={handleChange}
              />
            </div>

            <div className="form-group">
              <label htmlFor="images">Image URLs (‡∏´‡∏ô‡∏∂‡πà‡∏á URL ‡∏ï‡πà‡∏≠‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î)</label>
              <textarea
                id="images"
                name="images"
                className="form-textarea"
                placeholder="/uploads/image1.jpg&#10;/uploads/image2.jpg"
                value={formData.images}
                onChange={handleChange}
              />
            </div>

          </div>
          
          <footer className="modal-footer">
            <button
              type="button"
              className="btn-secondary"
              onClick={onClose}
              disabled={isLoading}
            >
              Cancel
            </button>
            <button
              type="submit"
              className="btn btn-primary" // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏•‡∏≤‡∏™‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å
              disabled={isLoading}
            >
              {isLoading ? 'Saving...' : (mode === 'edit' ? 'Update Product' : 'Add Product')}
            </button>
          </footer>
        </form>
      </div>
    </div>
  );
}